Разработка программного обеспечения включает в себя процесс тестирования. 
Самым эффективным способом тестирования на сегодняшний день считается автоматизированное тестирование. 
Чаще всего автоматизируется сам запуск тестовых сценариев. Процесс анализа и написания тестов производится человеком.

В экосистеме Java существует множество инструментов и бибилиотек автоматизации тестирования. Самые популярный это JUnit 5.

--

На слайде представлен класс, который реализует конвертацию строки в формате римских чисел в арабские числа. Это делает метод convert. 

--

Тестовый сценарий с использованием Junit библиотеки для представленного ранее класса может выглядеть следующим образом. Три метода, помеченные аннотацией @Test. 
Первый метод тестирует конвертацию символа C, второй числа 216 и третий числа 40. 
Тут представленно три метода, но они явно не тестируют все пространство римских чисел. Для полного тестирования пришлось бы писать очень много модульных тестов.

Для определения оптимального количества тесттовых методов и входных параметов существует ряд 
техних и подходов.

--

Тестирование на основе спецификации или тестирование на основе требований,

Тестирование на основе границ – это разработка модульных тестов, переметры которых являются граничными значениями.

Тестирование на основе модели базируется на модели работы ПО. Это может быть таблица решений или конечный автомат.

Тестирование на основе контракта подразумевает написание непосредственных проверок в коде программы. Такие проверки называеются пред условиями и пост условиями.

Тестирование свойств – это генерация псевдослучайных входных данных и верификация поведения програмыы с каждым набором таких данных.


--

Структурное тестирование – техника, каторая использует исходный код программы для разработки тестов. Основу структурного тестирования составляет критерий покрытия.
Критерий покрытия определяет полноту тестирования. 

--

Существует множество критериев покрытия. <называьб кратко>

--

До настоящего момента под «автоматизацией» понималась автоматизация выполнения тестов. 
Продвинутые подходы к автоматизации тестирования расширяют это понятие. Они исключают 
человеческий фактор в процессе тестирования. Это означает отсутсвие необходимости разрабатывать тестовые сценарии. 
Компьютер сделает это за человека. Иногда такие подходы называются тестированием с помощью искусственного интелекта.

--

Предмет исследования:​
тестировние ПО с помощью искусственного интелекта.​
​
Актуальность работы:​
необходимость производства качественного ПО с минимальным участием человека в процессе тестирования.​
​
Цель работы:​
исследование методов тестирования программного обеспечения с помощью искусственного интелекта и разработка инструмента автогенерации модульных тестов из java кода.​

--

1) Провести анализ существующих инструментов автоматизации тестирования на основе анализа кода.​

2) На основе проведенного анализа составить требования ​
к разрабатываемому инструменту.​

3) Разработать инструмент автомацизации анализа и написания тестовых сценариев для Java программ.

--


Существует несколько видов такого тестирования.

Статическое тестирование (статический анализ) — это автоматизированный процесс ревизии кода без его исполнения.

Мутационное тестирование, которое повышает качество тестов. Например, 
тест может достигать 100 % покрытия кода, но в то же время не содержать проверок (assertions). 
То есть тест запускает код, но не тестирует результат его исполнения. Мутационное тестирование решает эту проблему путем создания 
так называемых мутантов програмы и запуска тестов не для оригинальной программы, а для мутанта. По сути, мутант – это сломанная программа, 
у которой земенен оператор больше на меньше, например. От тестов ожидается индикация того, что программа сломанна. 
Чем больше мутантов было пойманно тестом, тем он качественнее. 

Еще один метод продвинутой автоматизации тестирования – Генерация псевдосдослучайных входных данных или фаззинг (англ. Fuzzing) — 
это техника тестирования, основанная на автомаческой генерации псевдослучайных входных данных. Цель​ фаззинга — поиск ошибок, 
утечек памяти, неудачных обработок ошибок и уязвимостей безопастности.

И последний вид продвинутого тестирования - тестирование на основе анализа исходного кода. 

--


Тестирование на основе анализа кода (англ. Search­based software testing, SBST) — автоматизированный процесс анализа исходного кода 
и генерации для него тестовых сценариев.
Основаня цель SBST — достижение 100 % покрытия кода минимальным набором тестов. Это задача оптимизации.

Тестирование на основе анализа кода — область компьютерных наук, которая находится в стадии активного изучения. 
На данный момент не существует широко распространненых инструментов автоматической генерации тестов. 

--

Как упоминалось ранее, тестирование на основе анализа кода – свежая область компьютерных наук и на данный момент не существует 
популярных инструментов. Но в исследовательских целях используются инструменты Randoop и EvoSuite. 
Сгенерированный код сложно читать человеку, а так же сами инструменты неприменимы в производстве.  
Однако, есть продукт Cover от компании Diffblue, который прост в использовании и генерирует читаемые тесты. 
Недостатком этого инструмента является недоступность для бесполатного использования. 

--

На слайде представлена таблица, демонстрирующая приемущества и недостатки рассмотренных ранее инструментов.
--

На основе анализа сформированны следующие требованияк к разрабатываемому инструменту. 
- Поставка в виде отдельной библиотеки;​
- генерация модульного теста для указанного Java класса;​
- обеспечение максимального покрытия по критерию ​ покрытия веток исполнения;​
- генерация понятного для человека кода.

-- 

Средства реализации представленны на слайде

-- 

И требования к программному и аппоратному обеспечению также представленны на слайде 

--

Основу реализации составляют несколько фаз. Это Анализ исходного кода. Составление прелставления теста, его можно назвать скелетом теста.
Затем происходит поиск оптимального решения и его оптимизация.

--

На слайде представлен пример исходного кода класса с единственным методом, который в зависимости от входных параметров возвращает разные результаты. 

--

Процесс анализа составляет модель класса, на основе ..........

--

В результате анализа получается модель, представленная на слайде.

--

Упомянутый ранее скелет тестового сценария, это прототип модульного теста, содержащий в себе информацию о структуре тестирующего кода.​
Важно отметить, что скелет не содержит конкретных параметров вызова методов.

--

Что бы понять, что из себя представляет скелет тестового сценария, предлагается рассмотреть уже готовый тестовый сценарий.
На слайде представлен возможный модультый тест для упомянутого ранее класса. 

--

Скелет тестового сценария не содержит конкретных параметров вызова, а только общую структуру кода. 

--

Задача оптимизации решается с помощью генетического алгоритма.  ......

--

Функция приспособленности (англ. fitness function) — вещественная или целочисленная функция одной или нескольких переменных, 
подлежащая оптимизации в результате работы генетического алгоритма, направляет эволюцию в сторону оптимального решения. 
В данном случае аргументом функции приспособленности является скелет теста с конкретными параметрами, а результатом вычисленный коэффициент покрытия.


--

На слайде представленны основные шаги вычисления функции приспособленности.
--

Селекция – процесс отбора особей для скрещивания. В процессе селекции выживают особи с набольшими значениями функции приспособленности.
Особями являются конкретные представления тестов с параметрами и результат функции приспособленности.

--

Мутация – случайное изменение одного или нескольких ген ​у набора особей. ​Это может быть подмена одного из параметро, прибавление к числу единицы или смена знака.
Цель мутации – не допустить достижения локального максимума​ у большинства особей. Другими словами, направить процесс эволюции в дргугую сторону с целью поиска более оптимального решения.

--

Пример сгенерированного кода

-- 






