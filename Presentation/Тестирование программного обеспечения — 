Тестирование программного обеспечения — процесс исследования, испытания программного продукта, 
целью которого является проверка соответствия между реальным поведением программы и её ожидаемым поведением на конечном наборе тестов, 
выбранных определённым образом. Глобально тестирование ПО делится на две категории ручное и автоматизированное. 
Ручное тестирование – процесс моделирования действий пользователя без использования специализированных средств. 
Такой способ тестирования прост и тестирует именно то, что видит пользователь. Однако наличие человеческого труда может стать причиной ошибки 
и занимает слишком много времени. Автоматизированное тестирование использует программные средства для выполнения тестов и проверки результатов выполнения, 
что значительно ускоряет процесс тестирования и делает его воспроизводимым. 

--

В экосистеме Java существует множество инструментов и бибилиотек автоматизации тестирования. Самые популярные JUnit, Spock Framework и TestNG.

--

На слайде представлен класс, который реализует конвертацию строки в формате римских чисел в арабские числа. Это делает метод convert. 

--

Тестовый сценарий с использованием Junit библиотеки для представленного ранее класса может выглядеть следующим образом. Три метода, помеченные аннотацией @Test. 
Первый метод тестирует конвертацию символа C, второй числа 216 и третий числа 40. Для определения количества тесттовых методов и входных параметом существует ряд 
техних и подходов.

--

Тестирование на основе спецификации или тестирование на основе требований – подход к разработке минимального набора тестов, которые будут удовлетворять спецификации. 
Основу этого метода составляет группировка множества входных данных на классы эквивалентности.

Тестирование на основе границ – это разработка модульных тестов, переметры которых являются граничными значениями.

Тестирование на основе модели базируется на модели работы ПО. Это может быть таблица решений или конечный автомат.

Тестирование на основе контракта подразумевает написание непосредственных проверок в коде программы. Такие проверки называеются пред условиями и пост условиями.

Тестирование свойств – это генерация псевдослучайных входных данных и верификация поведения програмыы с каждым набором таких данных.


--

Структурное тестирование – техника, каторая использует исходный код программы для разработки тестов. Основу структурного тестирования составляет критерий покрытия.
Критерий покрытия определяет полноту тестирования. 

--

Существует множество критериех покрытия.

Критерий покрытия строк – самый простой из существующих. 
Он основан на подсчете исполненых в ходе выполнения тестов строк кода программы. 
Расчитывается этот критерий как процентное соотношение исполненых в ходе выполнения тестов строк кода к общему числу строк кода. 

Критерий покрытия блоков расчитывается как соотношение исполнениых блоков к общему числу блоков. Блоки – это части постоенного заранее графа исполнения программы.

Критерий покрытия ветвлений учитывает не только блоки, но и ребра. 

Критерий покрытия условий разворачивает составные логические условия на последовательность простых. Это увеличивает эффективность критерия.  
На практике используется Conditions/Decisions coverage который сочетает покрытие ветвлений и условий.

Критерий покрытия путей исполнения учитывает покрытие уникальных путей в графе исполнения.

Modified Conditions/Decisions coverage – похоже на покрытие путей исполнения. Отличие состоит в том, 
что MC/DC учитывает не все возможные пути выполнения, а только «важные». В результате общее количество тестов сокращается.

--

На слайде представленно взаинтое отношение всех критериев. Самый верхний критерий покрытия путей исполнения является самым полным критерием 
и включает в себя остальные. Нижний блок – покрытие строк – обладает самой низкой эффективностью, однако прост в реализации.

--

До настоящего момента под «автоматизацией» понималась автоматизация выполнения тестов. 
Продвинутые подходы к автоматизации тестирования расширяют это понятие. Они исключают 
человеческий фактор в процессе тестирования. Это означает отсутсвие необходимости разрабатывать тестовые сценарии. 
Компьютер сделает это за человека. Иногда такие подходы называются тестированием с помощью искусственного интелекта.

--

Статическое тестирование (статический анализ) — это автоматизированный процесс ревизии кода без его исполнения.

При рассмотрении структурного тестирования были описанны различные критерии покрытия кода. 
Эти критерии нужны для того, чтобы измерить объем кода, выполненного в ходе тестирования. 
К сожалению, таких критериев может быть не достаточно для оценки качества тестов. Например, 
тест может достигать 100 % покрытия кода, но в то же время не содержать проверок (assertions). 
То есть тест запускает код, но не тестирует результат его исполнения. Мутационное тестирование решает эту проблему путем создания 
так называемых мутантов програмы и запуска тестов не для оригинальной программы, а для мутанта. По сути, мутант – это сломанная программа, 
у которой земенен оператор больше на меньше, например. От тестов ожидается индикация того, что программа сломанна. 
Чем больше мутантов было пойманно тестом, тем он качественнее. 

Еще один метод продвинутой автоматизации тестирования – Генерация псевдосдослучайных входных данных или фаззинг (англ. Fuzzing) — 
это техника тестирования программного обеспечения, основанная на автомаческой генерации псевдослучайных входных данных. Цель​ фаззинга — поиск ошибок, 
утечек памяти, неудачных обработок ошибок и уязвимостей безопастности.

И последний вид продвинутого тестирования - тестирование на основе анализа исходного кода. 

--


Тестирование на основе анализа кода (англ. Search­based software testing, SBST) — автоматизированный процесс анализа исходного кода 
и генерации для него тестовых сценариев.
Основаня цель SBST — достижение 100 % покрытия кода минимальным набором тестов. Это задача оптимизации.

Тестирование на основе анализа кода — область компьютерных наук, которая находится в стадии активного изучения. 
На данный момент не существует широко распространненых инструментов автоматической генерации тестов. 

--

Предмет исследования:​
продвинутые методы автоматизации тестирования ПО.​
​
Актуальность работы:​
повышение эффективности тестирования ПО.​
​
Цель работы:​
исследование продвинутых методов автоматизации тестирования и разработка инструмента автоматической генерации модульных тестов из java кода.​

--

1) Провести анализ существующих инструментов автоматизации тестирования на основе анализа кода.​

2) На основе проведенного анализа составить требования ​
к разрабатываемому инструменту.​

3) Разработать инструмент автомацизации анализа и написания тестовых сценариев для Java программ.

--

Как упоминалось ранее, тестирование на основе анализа кода – свежая область компьютерных наук и на данный момент не существует 
популярных инструментов. Но в исследовательских целях используются инструменты Randoop и EvoSuite. 
Сгенерированный код сложно читать человеку, а так же сами инструменты неприменимы в производстве.  
Однако, есть продукт Cover от компании Diffblu, который прост в использовании и генерирует читаемые тесты. 
Недостатком этого инструмента является недоступность для бесполатного использования. 

--

На основе анализа сформированны следующие требованияк к разрабатываемому инструменту. 
- Поставка в виде отдельной библиотеки;​
- генерация модульного теста для указанного Java класса;​
- обеспечение максимального покрытия по критерию ​ покрытия веток исполнения;​
- генерация понятного для человека кода.

-- 

Средства реализации представленны на слайде

-- 

И требования к программному и аппоратному обеспечению также представленны на слайде 

--

Основу реализации составляют несколько фаз. Это Анализ исходного кода. Составление прелставления теста, его можно назвать скелетом теста.
Затем происходит поиск оптимального решения и его оптимизация.

--

На слайде представлен пример исходного кода класса с единственным методом, который в зависимости от входных параметров возвращает разные результаты. 

--

В результате анализа исходного кода составляется внутренняя модель. ........

--

Упомянутый ранее скелет тестового сценария, это прототип модульного теста, содержащий в себе информацию о структуре тестирующего кода.​
Важно отметить, что скелет не содержит конкретных параметров вызова методов.

--

Что бы понять, что из себя представляет скелет тестового сценария, предлагается рассмотреть уже готовый тестовый сценарий.
На слайде представлен возможный модультый тест для кпомянутого ранее класса. 

--

Скелет тестового сценария не содержит конкретных параметров вызова, а только общую структуру кода. 

--

Задача оптимизации решается с помощью генетического алгоритма.  ......

--

Функция приспособленности (англ. fitness function) — вещественная или целочисленная функция одной или нескольких переменных, 
подлежащая оптимизации в результате работы генетического алгоритма, направляет эволюцию в сторону оптимального решения. 
В данном случае аргументом функции приспособленности является скелет теста с конкретными параметрами. 

--

Селекция – процесс отбора особей для скрещивания. В процессе селекции выживают особи с набольшими значениями функции приспособленности.
Особями являются конкретные представления тестов с параметрами и результат функции приспособленности.

--

Мутация – случайное изменение одного или нескольких ген ​у набора особей. ​Это может быть подмена одного из параметром, прибавление к числу единицы или смена знака.
Цель мутации – не допустить достижения локального максимума​
у большинства особей.






--


- постановка задачи нужна раньше 

- актуальность: необходимость повышения ввиду...

- продвинутый подход: не то не то.

